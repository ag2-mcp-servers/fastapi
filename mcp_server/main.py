# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:24:08+00:00



import argparse
import json
import os
from typing import *
from typing import Any, Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    Config,
    DiscordMessageRequest,
    HTTPValidationError,
    SlackMessageRequest,
    SnsMessageRequest,
    TwilioMessageRequest,
)

app = MCPProxy(
    title='FastAPI',
    version='0.1.0',
    servers=[{'url': 'http://botschaft.local'}],
)


@app.get('/config', tags=['configuration_management'])
def config_config_get(authorization: Optional[str] = None):
    """
    Config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/discord', tags=['discord_message_handling'])
def discord_get_discord_get(
    channel: str,
    message: Optional[str] = None,
    base64_message: Optional[str] = None,
    authorization: Optional[str] = None,
):
    """
    Discord Get
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/discord', tags=['discord_message_handling'])
def discord_post_discord_post(
    authorization: Optional[str] = None, body: DiscordMessageRequest = ...
):
    """
    Discord Post
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/slack', tags=['slack_message_handling'])
def slack_get_slack_get(
    channel: str,
    message: Optional[str] = None,
    base64_message: Optional[str] = None,
    authorization: Optional[str] = None,
):
    """
    Slack Get
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/slack', tags=['slack_message_handling'])
def slack_post_slack_post(
    authorization: Optional[str] = None, body: SlackMessageRequest = ...
):
    """
    Slack Post
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sns', tags=['sns_message_operations', 'topic_based_message_retrieval'])
def sns_get_sns_get(
    message: Optional[str] = None,
    base64_message: Optional[str] = None,
    authorization: Optional[str] = None,
):
    """
    Sns Get
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/sns', tags=['sns_message_operations'])
def sns_post_sns_post(
    authorization: Optional[str] = None, body: SnsMessageRequest = ...
):
    """
    Sns Post
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/topic/{topic_name}',
    tags=[
        'topic_based_message_retrieval',
        'discord_message_handling',
        'slack_message_handling',
        'sns_message_operations',
        'twilio_message_operations',
    ],
)
def topic_topic__topic_name__get(
    topic_name: str,
    message: Optional[str] = None,
    base64_message: Optional[str] = None,
    authorization: Optional[str] = None,
):
    """
    Topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/twilio', tags=['twilio_message_operations'])
def twilio_message_get_twilio_get(
    to: str,
    message: Optional[str] = None,
    base64_message: Optional[str] = None,
    authorization: Optional[str] = None,
):
    """
    Twilio Message Get
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/twilio', tags=['twilio_message_operations'])
def twilio_message_post_twilio_post(
    authorization: Optional[str] = None, body: TwilioMessageRequest = ...
):
    """
    Twilio Message Post
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
